// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id                     String      @id             @default(cuid())
  role                        role                  
  avatar                      String                      @default("https://cdn-icons-png.flaticon.com/512/2202/2202112.png")
  user_name                   String                      @unique
  email                       String                      @unique       
  password                    String?      
  google_id                   String?                     @unique
  city                        String?
  state                       String?
  is_active                   Boolean                     @default(true)
  created_at                  DateTime                
  updated_at                  DateTime                    @default(now())

  // relations 
  seller                      seller?
  requirements                requirements[]
  sentChats                   chatRoom[]                  @relation("UserSender")
  receivedChats               chatRoom[]                  @relation("UserReceiver")
  messages                    messages[]                  @relation("userMessage")
  user_session                session[]
}

model seller {
  seller_id                   String         @id          @unique
  description                 String?
  gst_number                  String?
  created_at                  DateTime          

  // relation to user
  user                        users                       @relation(fields: [seller_id], references: [user_id], onDelete: Cascade)
}

model requirements {

requirement_id                String      @id             @default(cuid())
buyer_id                      String          
product_title                 String          
categories                    String[]                    @default([])
reference_image_url           String[]
description                   String? 
quantity_needed               String?
price_range                   String?
city                          String?
state                         String?
delivery_location             String?
is_deleted                    Boolean                     @default(false)
paymentId                     String?       // later refrence to actual payments model
created_at                    DateTime        
updated_at                    DateTime                    @default(now())

// relation to user
buyer                         users                       @relation(fields: [buyer_id], references: [user_id], onDelete: Cascade)
}


model chatRoom {
  room_id                     String        @id           @default(cuid())
  sender_id                   String
  receiver_id                 String
  created_at                  DateTime                    @default(now())
  paymentId                   String?       // later refrence to actual payments model
  room_name                   String?
  blocked                     String?                     
  sender_name                 String?
  receiver_name               String?
  sender_profile_image        String?
  receiver_profile_image      String?
  sender_chatroom_delete      String?                    
  receiver_chatroom_delete    String?                    

  messages                    messages[]
  sender                      users                       @relation("UserSender", fields: [sender_id], references: [user_id], onDelete: Cascade)
  receiver                    users                       @relation("UserReceiver", fields: [receiver_id], references: [user_id], onDelete: Cascade)
                                                          @@unique([sender_id, receiver_id])
}

model messages {
  message_id                  String        @id           @default(cuid())
  room_id                     String
  sender_id                   String
  content                     String
  timestamp                   DateTime                    @default(now())

  chatRoom                    chatRoom                    @relation(fields: [room_id], references: [room_id], onDelete: Cascade)
  message_sender              users                       @relation("userMessage", fields: [sender_id], references: [user_id], onDelete: Cascade)
}

model session{
  id                          String        @id           @default(cuid())
  user_id                     String            
  created_at                  DateTime
  updated_at                  DateTime                    @default(now())

  user_session                users                       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

enum role {
  buyer
  seller
  admin
}